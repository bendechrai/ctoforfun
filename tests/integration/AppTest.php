<?php

use Gilbitron\App;
use Gilbitron\Util\SimpleCache;
use League\Plates\Engine;

class AppTest extends PHPUnit_Framework_TestCase
{
    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        Mockery::close();
    }

    /**
     * @test
     */
    public function it_loads_dependencies()
    {
        global $templates;

        $app = new App();

        $app->bootstrap();

        $this->assertInstanceOf(Engine::class, $templates);

        $this->assertInstanceOf(SimpleCache::class, $app->container->get(SimpleCache::class));
    }

    /**
     * @test
     */
    public function it_loads_home_page()
    {
        global $templates;

        $app = new App();

        $app->bootstrap();

        $templates = Mockery::mock(Engine::class);

        $templates->shouldReceive('render')->once()->with('home');

        $app->run();

    }

    /**
     * @test
     */
    public function it_loads_the_select_random_attende_page()
    {
        global $templates;

        $_SERVER['REQUEST_URI'] = '/meetup-random-attendee';

        $app = new App();

        $app->bootstrap();

        $templates = Mockery::mock(Engine::class);

        $templates->shouldReceive('render')->once()->with('meetup-random-attendee', ['hostsOK' => true]);

        $app->run();
    }
    
    /**
     * @test
     */
    public function it_selects_a_user_from_the_loaded_meetup_page()
    {
        global $templates;

        $_SERVER['REQUEST_URI'] = '/meetup-random-attendee';

        $app = new App();

        $app->bootstrap();

        $templates = Mockery::mock(Engine::class);

        $templates->shouldReceive('render')->once()->with('meetup-random-attendee', ['hostsOK' => true]);

        $app->run();
    }
}
